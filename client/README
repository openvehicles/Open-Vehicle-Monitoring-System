Open Vehicle Monitoring System
==============================


Perl modules
============

The following perl modules from CPAN are used by the clients:

  Config::IniFiles
  Digest::MD5
  Digest::HMAC
  Crypt::RC4
  MIME::Base64
  IO::Socket::INET
  IO::Socket::Timeout

...additionally for the diag mode clients (serial connection):
  Device::SerialPort   (UNIX)
  Win32::SerialPort    (Windows)

Install modules using cpanminus:
  cpanm Config::IniFiles Digest::MD5 Digest::HMAC Crypt::RC4 MIME::Base64 \
    IO::Socket::INET IO::Socket::Timeout Device::SerialPort

Install modules using apt-get:
  apt-get install libdigest-hmac-perl libcrypt-rc4-perl \
    libconfig-inifiles-perl libdevice-serialport-perl

The clients
===========

The scripts "client_app.pl", "status.pl" and "cmd.pl" can be used to access the OVMS server from the
command line.

All will read "ovms_client.conf" for the server and login configuration. Change to your vehicle id,
server and module password.

"client_app.pl" will connect to the server, listen and output any protocol lines received forever
until stopped (Ctrl-C).

"status.pl" retrieves the last server stored record of a standard OVMS status protocol message.
You may specify the message type (letter) as an argument:

	S		State (SOC, charge state etc.) (Default)
	D		Environment (temperatures etc.)
	L		Location
	W		Tire pressures
	T		Update time
	F		Firmware version
	V		Firmware capabilities

See "OVMS protocol" documentation for record details.

"cmd.pl" can be used to send single commands to the server/car. It will output only server responses
that match the command issued and terminate after having received no more command results for a
defined time.

"cmd.pl" can be used to query historical record entries from the server or to automate car communication.

Examples:

Query stored historical records:
	#> ./cmd.pl 31

Retrieve all records of type "*-OVM-DebugCrash":
	#> ./cmd.pl 32 "*-OVM-DebugCrash"

Send USSD code to query SIM account balance:
	#> ./cmd.pl 41 "*100#"
There's also the "querybalance.sh" script to do this.


Push notifications & subscriptions
==================================

Use "notify.pl" to send a push notification alert text message to your Apps:

	#> ./notify.pl 'Hello World!'

If the server has mail notification support enabled you can use "subscribe.pl" to
manage your email subscriptions.

Subscribe:
	#> ./subscribe.pl joe joe@email.com
Unsubscribe:
	#> ./subscribe.pl joe -


Renault Twizy scripts
=====================

"rt_fetchdata.sh" will fetch all Twizy specific track telemetry records and save them using a
common filename prefix.

"rt_querylogs.sh" will query all SEVCON logs, i.e. ask the module to query them and send
the history records to the server.

"rt_fetchlogs.sh" can then be used to fetch all logs records from the server into local
files (similar to rt_fetchdata).

"rt_resetlogs.sh" will reset all SEVCON logs. Please note: not all log entries
may be clearable, query and fetch again to check the log contents after reset.


The diag mode clients
=====================

The diag mode clients can be used additionally or instead of a terminal emulator
to access the module via serial line.

Both clients offer command line help using the "--help" option.

"diagcmd.pl" sends an arbitrary number of commands to the module and outputs
their responses. (Note: if you want to redirect the output you need to
explicitly do "perl diagcmd.pl ..." instead of "./diagcmd.pl ...")

Example: init diag mode and read out car status:

	#> ./diagcmd.pl --init "s stat"

Note: you only need to do "--init" once (this will listen for the module
startup and issue the "SETUP" command).

"dcf_download.pl" uses the Twizy CFG commands to download the register dictionary
and current values from the SEVCON controller and write a DCF in CSV format.

Example:

	#> ./dcf_download.pl --init --output=my-config.csv

Note: as every single SDO read needs to be issued through the CFG command interface
this is a long operation, expect ~ 1 hour for a complete download. Progress is reported,
and you can resume a broken download using the "--start" option.


Utilities: cfgconv
==================

"cfgconv" converts SEVCON profiles from text (commands/tags) to base64 and vice versa.
See Twizy commands "CFG GET" and "CFG SET" for details.

Build:
	gcc -o cfgconv cfgconv.c

Use:
	a) convert base64 to commands: ./cfgconv base64data > profile.txt
	b) convert commands to base64: ./cfgconv < profile.txt
	c) convert base64 to tags: ./cfgconv -t base64data > profile.inf
	d) convert tags to base64: ./cfgconv -t < profile.inf


